apply plugin: 'com.android.application'


android {
    signingConfigs {
        config {
            keyPassword 'android'
            storeFile file('D:/Android/0workSpacesAS/coolyotaY3/logreport/app/debug.keystore-platform')
            storePassword 'android'
            keyAlias 'androiddebugkey'
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }
    defaultConfig {
        applicationId "com.coolyota.logreport"
        minSdkVersion 22
        targetSdkVersion 22
        versionCode 1
        versionName "0.01"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes { //这里面可以配置debug和release版本的一些参数，比如混淆、签名配置等

        release { //release版本
            buildConfigField "boolean", "LOG_DEBUG", "false"
//            buildConfigField "String", "BASE_URL", "\"http://pro.dcss.baoliyota.com\""
            buildConfigField "String", "BASE_URL", "\"http://test.dcss.baoliyota.com\""
            minifyEnabled false //是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //混淆文件位置
                signingConfig signingConfigs.config
            lintOptions {
                checkReleaseBuilds false
                // Or, if you prefer, you can continue to check for errors in release builds,
                // but continue the build even when errors are found:
                abortOnError false
            }

        }

        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "BASE_URL", "\"http://test.dcss.baoliyota.com\""
            minifyEnabled false
            // 移除无用的resource文件
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                println("outputFile = " + outputFile)
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName
                    if (variant.buildType.name == 'release') {
                        fileName = "CY_Log_Reporter_user.apk"
                    } else if (variant.buildType.name == 'debug') {
                        fileName = "CY_Log_Reporter.apk"
                    }
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }


    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
//    useLibrary 'org.apache.http.legacy'
}



dependencies {
    //    provided fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:25.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
   /* compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:preference-v14:25.3.1'*/
}
